/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import DAO.ConnectionFactory;
import DAO.Player;
import DAO.Playerdetail;
import DAO.ScoreDetails;
import DAO.ScoreDetails2;
import java.awt.Image;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author 5632-27
 */
public class ScoreUpdater extends javax.swing.JFrame {

    /**
     * Creates new form ScoreUpdater
     */
    public ScoreUpdater() {
        initComponents();
        Image image = new ImageIcon("E:\\CDAC\\Data Structure and algorithm\\Neatbeans IDE\\Miniproject\\Cricket Img\\logo.png").getImage();
        setIconImage(image);
//        Playerdetail p = new Playerdetail();
//        p.getBatter();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        one = new javax.swing.JRadioButton();
        two = new javax.swing.JRadioButton();
        four = new javax.swing.JRadioButton();
        six = new javax.swing.JRadioButton();
        wide = new javax.swing.JRadioButton();
        noBall = new javax.swing.JRadioButton();
        three = new javax.swing.JRadioButton();
        extraRun = new javax.swing.JTextField();
        runs = new javax.swing.JLabel();
        seperator = new javax.swing.JLabel();
        wickets = new javax.swing.JLabel();
        overs = new javax.swing.JLabel();
        dotSeperator = new javax.swing.JLabel();
        ball = new javax.swing.JLabel();
        zero = new javax.swing.JRadioButton();
        getButton = new javax.swing.JButton();
        innLabel = new javax.swing.JLabel();
        updateScore1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        updateScore = new javax.swing.JButton();
        Lbatter1 = new javax.swing.JLabel();
        batter1 = new javax.swing.JComboBox<>();
        Lbowler = new javax.swing.JLabel();
        bowler = new javax.swing.JComboBox<>();
        out = new javax.swing.JRadioButton();
        innANSWER = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        message = new javax.swing.JTextArea();
        remark = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(550, 450));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Score Updater");

        buttonGroup1.add(one);
        one.setText("1");

        buttonGroup1.add(two);
        two.setText("2");

        buttonGroup1.add(four);
        four.setText("4");

        buttonGroup1.add(six);
        six.setText("6");

        buttonGroup1.add(wide);
        wide.setText("Wide");

        buttonGroup1.add(noBall);
        noBall.setText("No Ball");

        buttonGroup1.add(three);
        three.setText("3");

        extraRun.setMaximumSize(new java.awt.Dimension(50, 20));
        extraRun.setMinimumSize(new java.awt.Dimension(50, 20));
        extraRun.setPreferredSize(new java.awt.Dimension(50, 20));
        extraRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraRunActionPerformed(evt);
            }
        });

        runs.setBackground(new java.awt.Color(153, 255, 255));
        runs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        runs.setForeground(new java.awt.Color(0, 102, 51));
        runs.setMaximumSize(new java.awt.Dimension(30, 20));
        runs.setMinimumSize(new java.awt.Dimension(30, 20));
        runs.setPreferredSize(new java.awt.Dimension(30, 20));

        seperator.setBackground(new java.awt.Color(153, 255, 255));
        seperator.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        seperator.setForeground(new java.awt.Color(0, 102, 51));
        seperator.setMaximumSize(new java.awt.Dimension(30, 20));
        seperator.setMinimumSize(new java.awt.Dimension(30, 20));
        seperator.setPreferredSize(new java.awt.Dimension(30, 20));

        wickets.setBackground(new java.awt.Color(153, 255, 255));
        wickets.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        wickets.setForeground(new java.awt.Color(0, 102, 51));
        wickets.setMaximumSize(new java.awt.Dimension(30, 20));
        wickets.setMinimumSize(new java.awt.Dimension(30, 20));
        wickets.setPreferredSize(new java.awt.Dimension(30, 20));

        overs.setBackground(new java.awt.Color(153, 255, 255));
        overs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        overs.setForeground(new java.awt.Color(0, 102, 51));
        overs.setMaximumSize(new java.awt.Dimension(30, 20));
        overs.setMinimumSize(new java.awt.Dimension(30, 20));
        overs.setPreferredSize(new java.awt.Dimension(30, 20));

        dotSeperator.setBackground(new java.awt.Color(153, 255, 255));
        dotSeperator.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        dotSeperator.setForeground(new java.awt.Color(0, 102, 51));
        dotSeperator.setMaximumSize(new java.awt.Dimension(30, 20));
        dotSeperator.setMinimumSize(new java.awt.Dimension(30, 20));
        dotSeperator.setPreferredSize(new java.awt.Dimension(30, 20));

        ball.setBackground(new java.awt.Color(153, 255, 255));
        ball.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ball.setForeground(new java.awt.Color(0, 102, 51));
        ball.setMaximumSize(new java.awt.Dimension(30, 20));
        ball.setMinimumSize(new java.awt.Dimension(30, 20));
        ball.setPreferredSize(new java.awt.Dimension(30, 20));

        buttonGroup1.add(zero);
        zero.setText("0");

        getButton.setText("Get");
        getButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getButtonActionPerformed(evt);
            }
        });

        innLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        innLabel.setForeground(new java.awt.Color(255, 51, 51));
        innLabel.setText("Innings :");

        updateScore1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        updateScore1.setText("2nd innings");
        updateScore1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateScore1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Over throws/ extra runs");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Total Score");

        updateScore.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        updateScore.setText("Update Score");
        updateScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateScoreActionPerformed(evt);
            }
        });

        Lbatter1.setText("Batter");

        batter1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "1", "2", "3" }));

        Lbowler.setText("Bowler");

        bowler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bowlerActionPerformed(evt);
            }
        });

        buttonGroup1.add(out);
        out.setText("Out");

        innANSWER.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        innANSWER.setForeground(new java.awt.Color(255, 51, 51));

        message.setColumns(20);
        message.setRows(5);
        jScrollPane1.setViewportView(message);

        remark.setText("Messag");
        remark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remarkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(innLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noBall)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(six)
                                .addComponent(two, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(innANSWER, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(three)
                            .addComponent(out)
                            .addComponent(zero))
                        .addGap(266, 266, 266))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(updateScore1)
                        .addGap(70, 70, 70)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(updateScore)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(wide)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(four)
                                                    .addComponent(one))))))
                                .addGap(27, 27, 27)
                                .addComponent(extraRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(remark)))
                        .addGap(57, 57, 57)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(overs, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(runs, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dotSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ball, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wickets, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Lbowler)
                                .addGap(18, 18, 18)
                                .addComponent(bowler, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Lbatter1)
                                .addGap(18, 18, 18)
                                .addComponent(batter1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(getButton))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(innLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(innANSWER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(one)
                                .addComponent(Lbatter1)
                                .addComponent(batter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(34, 34, 34)
                            .addComponent(four)
                            .addGap(35, 35, 35)
                            .addComponent(wide))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(two)
                            .addGap(34, 34, 34)
                            .addComponent(six)
                            .addGap(34, 34, 34)
                            .addComponent(noBall)
                            .addGap(1, 1, 1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(three)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zero)
                            .addComponent(Lbowler)
                            .addComponent(bowler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(out)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getButton)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(extraRun, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(updateScore)
                        .addComponent(updateScore1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runs, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wickets, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dotSeperator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ball, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remark)
                            .addComponent(overs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateScoreActionPerformed
        // Update Score here
        Playerdetail p = new Playerdetail();
        ScoreDetails s = new ScoreDetails();
        ScoreDetails2 s2 = new ScoreDetails2();
        
        if(innANSWER.getText().equalsIgnoreCase("1"))
        {
            s.updateCurrentBatsman(batter1.getSelectedItem().toString());
            s.updateCurrentBowler(bowler.getSelectedItem().toString());
            
            if(s.getBall()<6 && s.getOver()<s.getTotalOvers() && s.getWickets()<10){

                if(s.getBall()==6){
                    s.resetBalls();
                    s.updateOver();
                }    

                if(zero.isSelected()){
                    s.updateRuns(Integer.parseInt(zero.getText()));
                    s.updateballs();
                    p.setRunAndBall(0,batter1.getSelectedItem().toString());
                    p.setRunAndBall(0,bowler.getSelectedItem().toString());

                    if(extraRun.getText().equals("")){ //if no ball text field is empty set it to 0
                        s.updateRuns(0);

                    }else{
                        s.updateRuns(Integer.parseInt(extraRun.getText())); 
                    }

                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));

                }

                if(one.isSelected()){
                    s.updateRuns(Integer.parseInt(one.getText()));
                    s.updateballs();
                    p.setRunAndBall(1,batter1.getSelectedItem().toString());
                    p.setRunAndBall(1,bowler.getSelectedItem().toString());

                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));

                }
                if(two.isSelected()){
                    s.updateRuns(Integer.parseInt(two.getText()));
                    s.updateballs();
                    p.setRunAndBall(2,batter1.getSelectedItem().toString());
                    p.setRunAndBall(2,bowler.getSelectedItem().toString());
                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));

                }
                if(three.isSelected()){
                    s.updateRuns(Integer.parseInt(three.getText()));
                    s.updateballs();
                    p.setRunAndBall(3,batter1.getSelectedItem().toString());
                    p.setRunAndBall(3,bowler.getSelectedItem().toString());
                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));

                }
                if(four.isSelected()){
                    s.updateRuns(Integer.parseInt(four.getText()));
                    s.updateballs();
                    p.setRunAndBall(4,batter1.getSelectedItem().toString());
                    p.setRunAndBall(4,bowler.getSelectedItem().toString());
                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));

                }
                if(six.isSelected()){
                    s.updateRuns(Integer.parseInt(six.getText()));
                    s.updateballs();
                    p.setRunAndBall(6,batter1.getSelectedItem().toString());
                    p.setRunAndBall(6,bowler.getSelectedItem().toString());
                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));

                }
                if(wide.isSelected()){
                    s.updateRuns(1);
                    if(extraRun.getText().equals("")){ //if wide text field is empty set it to 0
                        s.updateRuns(0);
                        p.setRunAndBall(1,bowler.getSelectedItem().toString());
    //                    p.setRunAndBall(1,batter1.getSelectedItem().toString());
                    }else{
                        s.updateRuns(Integer.parseInt(extraRun.getText())); 
                        p.setRunAndBall(1+Integer.parseInt(extraRun.getText()),bowler.getSelectedItem().toString());
                    }
        //            s.updateballs();
                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));


                }
                if(noBall.isSelected()){
                    s.updateRuns(1);
                    if(extraRun.getText().equals("")){ //if no ball text field is empty set it to 0
                        s.updateRuns(0);
                        p.setRunAndBall(1,bowler.getSelectedItem().toString());
                    }else{
                        s.updateRuns(Integer.parseInt(extraRun.getText())); 
                        p.setRunAndBall(1+Integer.parseInt(extraRun.getText()),bowler.getSelectedItem().toString());
                    }
        //            s.updateballs();
                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));


                }
                if(out.isSelected()){
                    s.updateRuns(0);
                    s.updateWickets();
                    s.updateballs();
                    p.setRunAndBall(0,bowler.getSelectedItem().toString());
                    runs.setText(String.valueOf(s.getRuns()));
                    seperator.setText("/");
                    wickets.setText(String.valueOf(s.getWickets()));
                    overs.setText(String.valueOf(s.getOver()));
                    dotSeperator.setText(".");
                    ball.setText(String.valueOf(s.getBall()));
                }
                
                

                }else{
                    System.err.println("Balls more than or equal 6");
                    if(s.getBall()==6){
                        s.resetBalls();
                        s.updateOver();
                    }
                    if(s.getOver() == s.getTotalOvers()){
                        JOptionPane.showMessageDialog(rootPane, "Start Second Inning");
                    }
                    //Add code here for End case for 2nd inning
                }
            }// 1 st case ... if ends here

            if(innANSWER.getText().equalsIgnoreCase("2")){

                if(s2.getBall2()<6 && s2.getOver2()<s2.getTotalOvers2() && s2.getWickets2()<10 ){

                    if(s2.getBall2()==6){
                        s2.resetBalls2();
                        s2.updateOver2();
                    }    

                    if(zero.isSelected()){
                        s2.updateRuns2(Integer.parseInt(zero.getText()));
                        s2.updateballs2();
                        if(extraRun.getText().equals("")){ //if no ball text field is empty set it to 0
                            s2.updateRuns2(0);
                        }else{
                            s2.updateRuns2(Integer.parseInt(extraRun.getText())); 
                        }
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));


                    }

                    if(one.isSelected()){
                        s2.updateRuns2(Integer.parseInt(one.getText()));
                        s2.updateballs2();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));

                    }
                    if(two.isSelected()){
                        s2.updateRuns2(Integer.parseInt(two.getText()));
                        s2.updateballs2();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));

                    }
                    if(three.isSelected()){
                        s2.updateRuns2(Integer.parseInt(three.getText()));
                        s2.updateballs2();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));
                    }
                    if(four.isSelected()){
                        s2.updateRuns2(Integer.parseInt(four.getText()));
                        s2.updateballs2();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));
                    }
                    if(six.isSelected()){
                        s2.updateRuns2(Integer.parseInt(six.getText()));
                        s2.updateballs2();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));
                    }
                    if(wide.isSelected()){
                        s2.updateRuns2(1);
                        if(extraRun.getText().equals("")){ //if wide text field is empty set it to 0
                            s2.updateRuns2(0);
                        }else{
                            s2.updateRuns2(Integer.parseInt(extraRun.getText())); 
                        }
            //            s.updateballs();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));


                    }
                    if(noBall.isSelected()){
                        s2.updateRuns2(1);
                        if(extraRun.getText().equals("")){ //if no ball text field is empty set it to 0
                            s2.updateRuns2(0);
                        }else{
                            s2.updateRuns2(Integer.parseInt(extraRun.getText())); 
                        }
            //            s.updateballs();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));

                    }
                    if(out.isSelected()){
                        s2.updateRuns2(0);
                        s2.updateWickets2();
                        s2.updateballs2();
                        runs.setText(String.valueOf(s2.getRuns2()));
                        seperator.setText("/");
                        wickets.setText(String.valueOf(s2.getWickets2()));
                        overs.setText(String.valueOf(s2.getOver2()));
                        dotSeperator.setText(".");
                        ball.setText(String.valueOf(s2.getBall2()));
                    }
                    
                    if(s2.getRuns2()>s.getRuns()){
                        JOptionPane.showMessageDialog(rootPane, "Batting Team WON !!!");
                    }

                }else{ //Case 2 inner if ends here
                    System.err.println("Balls more than or equal 6");
                    if(s2.getBall2()==6){
                        s2.resetBalls2();
                        s2.updateOver2();
                    }    
                    int a,b;
                    a=s2.getOver2();
                    b=s2.getTotalOvers2();
                    if(a==b){
                        JOptionPane.showMessageDialog(rootPane, "Bowling Team WON !!!");
                    }
                }//case 2 inner else ends here
        } //Case 2 if ends here
    }//GEN-LAST:event_updateScoreActionPerformed
    //update ends above
    
    
    //Get Batter Code Here
    public List<Player> getBatter() {
    
    ScoreUpdater s = new ScoreUpdater();
        List<Player> list = new ArrayList<>();
        Playerdetail pd = new Playerdetail();
        String away = String.valueOf(pd.getTeamNoAwayB());
        String awaySide = pd.getAwayPreference();
        String homeSide = pd.getHomePreference();
        
        
        
        if(awaySide.equalsIgnoreCase("Batting")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Batting Away side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side ='Batting' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a;
                        a=rs.getString("fullName");
                        

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbatter :: "+e.getMessage());
        }
                return list; 
    }//Get Batter 1 code Ends here............
        
    if(homeSide.equalsIgnoreCase("Batting")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Batting home side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side ='Batting' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a;
                        a=rs.getString("fullName");
                        

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbatter :: "+e.getMessage());
        }
                return list; 
    }//Get Batter 1 code Ends here............    
        return list; 
    } 
    
    
    
    
    public List<Player> getBatter2() {

        
    ScoreUpdater s = new ScoreUpdater();
        List<Player> list = new ArrayList<>();
        Playerdetail pd = new Playerdetail();
        String away = String.valueOf(pd.getTeamNoAwayB());
//        String awaySide = pd.getAwayPreference();
//        String homeSide = pd.getHomePreference();
        String awaySide2 = pd.getAwayPreference2();
        String homeSide2 = pd.getHomePreference2();
        
        if(awaySide2.equalsIgnoreCase("Batting")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Batting Away side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side2 ='Batting' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a;
                        a=rs.getString("fullName");
//                        b=rs.getString("pSurname");

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbatter :: "+e.getMessage());
        }
                return list; 
    }//Get Batter 1 code Ends here............
        
    if(homeSide2.equalsIgnoreCase("Batting")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Batting home side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side2 ='Batting' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a;
                        a=rs.getString("fullName");
//                        b=rs.getString("pSurname");

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbowler :: "+e.getMessage());
        }
                return list; 
    }//Get Bowler 1 code Ends here............ 
    
    return list;
    }
    
    //Get Bowler Code Here
    public List<Player> getBowler() {

        
    ScoreUpdater s = new ScoreUpdater();
        List<Player> list = new ArrayList<>();
        Playerdetail pd = new Playerdetail();
        String away = String.valueOf(pd.getTeamNoAwayB());
        String awaySide = pd.getAwayPreference();
        String homeSide = pd.getHomePreference();
        String awaySide2 = pd.getAwayPreference2();
        String homeSide2 = pd.getHomePreference2();
        
        if(awaySide.equalsIgnoreCase("Bowling")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Bowling Away side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side ='Bowling' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a,b;
                        a=rs.getString("fullName");
//                        b=rs.getString("pSurname");

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbatter :: "+e.getMessage());
        }
                return list; 
    }//Get Batter 1 code Ends here............
        
    if(homeSide.equalsIgnoreCase("Bowling")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Bowling home side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side ='Bowling' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a,b;
                        a=rs.getString("fullName");
//                        b=rs.getString("pSurname");

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbowler :: "+e.getMessage());
        }
                return list; 
    }//Get Bowler 1 code Ends here............ 
    
    return list;
    }

    
    
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    
    public List<Player> getBowler2() {

        
    ScoreUpdater s = new ScoreUpdater();
        List<Player> list = new ArrayList<>();
        Playerdetail pd = new Playerdetail();
        String away = String.valueOf(pd.getTeamNoAwayB());
//        String awaySide = pd.getAwayPreference();
//        String homeSide = pd.getHomePreference();
        String awaySide2 = pd.getAwayPreference2();
        String homeSide2 = pd.getHomePreference2();
        
        if(awaySide2.equalsIgnoreCase("Bowling")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Bowling Away side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side2 ='Bowling' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a,b;
                        a=rs.getString("fullName");
//                        b=rs.getString("pSurname");

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbatter :: "+e.getMessage());
        }
                return list; 
    }//Get Batter 1 code Ends here............
        
    if(homeSide2.equalsIgnoreCase("Bowling")){
            try{
            Connection con = ConnectionFactory.getConnection();
                
                    System.out.println("In Bowling home side");
                    PreparedStatement pst = con.prepareStatement("select fullName from teams where side2 ='Bowling' ");
                    ResultSet rs = pst.executeQuery();
                    while(rs.next()){
                        String a,b;
                        a=rs.getString("fullName");
//                        b=rs.getString("pSurname");

                        Player pla = new Player(a);
                        list.add(pla);
                    }
                }
        
        catch(SQLException e){
            System.out.println("Message Error in getbowler :: "+e.getMessage());
        }
                return list; 
    }//Get Bowler 1 code Ends here............ 
    
    return list;
    }
    
    
    
    
    private void getButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getButtonActionPerformed
        //Get batter and bowler code here
                if(innANSWER.getText().equalsIgnoreCase("1"))
        {
            System.out.println(" 1 ::");
            batter1.removeAllItems();
            ScoreUpdater p = new ScoreUpdater();
//        list.add(p.getBatter());
        
       for(Player pl : p.getBatter()){
           batter1.addItem(pl.toString());
//           bowler.addItem(pl.toString());
       }
       for(Player pl : p.getBowler()){
////           batter1.addItem(pl.toString());
           bowler.addItem(pl.toString());
       }
        }
        
                
    if(innANSWER.getText().equalsIgnoreCase("2"))
        {
            System.out.println(" 2 ::");
            batter1.removeAllItems();
        ScoreUpdater p = new ScoreUpdater();
//        list.add(p.getBatter());
        
       for(Player pl : p.getBatter2()){
           batter1.addItem(pl.toString());
//           bowler.addItem(pl.toString());
       }
       for(Player pl : p.getBowler2()){
////           batter1.addItem(pl.toString());
           bowler.addItem(pl.toString());
       }
        }
        
        
        
        
        
//        batter1.addItem(p.getBatter());
//        batter2.addItem(p.getBatter());
//        bowler.addItem(p.getBowler());
    }//GEN-LAST:event_getButtonActionPerformed

    private void updateScore1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateScore1ActionPerformed
        // TODO add your handling code here:
        StartMatch m = new StartMatch();
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_updateScore1ActionPerformed

    private void extraRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraRunActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extraRunActionPerformed

    private void bowlerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bowlerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bowlerActionPerformed

    private void remarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remarkActionPerformed
        // TODO add your handling code here:
        if(innANSWER.getText().equalsIgnoreCase("1"))
        {
            ScoreDetails s = new ScoreDetails();
            s.updateRemark(message.getText());
        }
        if(innANSWER.getText().equalsIgnoreCase("2")){
            ScoreDetails2 s2 = new ScoreDetails2();
            s2.updateRemark2(message.getText());
        }
        
    }//GEN-LAST:event_remarkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScoreUpdater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScoreUpdater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScoreUpdater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScoreUpdater.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScoreUpdater().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Lbatter1;
    private javax.swing.JLabel Lbowler;
    private javax.swing.JLabel ball;
    public javax.swing.JComboBox<String> batter1;
    public javax.swing.JComboBox<String> bowler;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel dotSeperator;
    private javax.swing.JTextField extraRun;
    private javax.swing.JRadioButton four;
    private javax.swing.JButton getButton;
    public javax.swing.JLabel innANSWER;
    private javax.swing.JLabel innLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea message;
    private javax.swing.JRadioButton noBall;
    private javax.swing.JRadioButton one;
    private javax.swing.JRadioButton out;
    private javax.swing.JLabel overs;
    private javax.swing.JButton remark;
    private javax.swing.JLabel runs;
    private javax.swing.JLabel seperator;
    private javax.swing.JRadioButton six;
    private javax.swing.JRadioButton three;
    private javax.swing.JRadioButton two;
    private javax.swing.JButton updateScore;
    private javax.swing.JButton updateScore1;
    private javax.swing.JLabel wickets;
    private javax.swing.JRadioButton wide;
    private javax.swing.JRadioButton zero;
    // End of variables declaration//GEN-END:variables
}
